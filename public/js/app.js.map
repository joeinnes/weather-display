{"version":3,"sources":["app/initialize.js","app/main.js"],"names":["document","addEventListener","require","fetchJsonp","getLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","getWeather","apiKey","window","fetch","then","data","json","catch","err","getPlaceImage","loc","google","maps","LatLng","map","Map","createElement","center","zoom","request","location","radius","service","places","PlacesService","nearbySearch","results","status","PlacesServiceStatus","OK","photoUrl","photos","getUrl","e","console","error","all","log","conditions","weather","description","image","name","locationInfo","resp","page","query","pages","extract","updateView","sys","country","main","temp","toPrecision","handleError","city","temperature","getElementById","style","backgroundImage","innerText","display"],"mappings":"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","file":"public/js/app.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n  require('./main')\n})\n","/* globals google, fetchJsonp */\nconst fetchJsonp = require('fetch-jsonp')\nrequire('whatwg-fetch') // Monkey-patch global environment with fetch\n\nfunction getLocation () {\n  return new Promise((resolve, reject) => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let lat = position.coords.latitude\n        let long = position.coords.longitude\n        resolve([lat, long])\n      })\n    } else {\n      reject('Unable to get location')\n    }\n  })\n}\n\nfunction getWeather (lat, long) {\n  return new Promise((resolve, reject) => {\n    const apiKey = '24da4957a0a39b21e163f0a4b5a8f82b'\n    window.fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${apiKey}`)\n      .then((data) => data.json())\n      .then((data) => {\n        resolve(data)\n      })\n      .catch((err) => {\n        reject(err)\n      })\n  })\n}\n\nfunction getPlaceImage (lat, long) {\n  return new Promise((resolve, reject) => {\n    let loc = new google.maps.LatLng(lat, long)\n    let map = new google.maps.Map(document.createElement('div'), {\n      center: loc,\n      zoom: 15\n    })\n    let request = {\n      location: loc,\n      radius: '2500'\n    }\n    let service = new google.maps.places.PlacesService(map)\n    service.nearbySearch(request, (results, status) => {\n      try {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          let photoUrl = results[0].photos[0].getUrl({'maxWidth': 2000, 'maxHeight': 2000})\n          resolve(photoUrl)\n        } else {\n          resolve('https://source.unsplash.com/random')\n        }\n      } catch (e) {\n        console.error(e)\n        resolve('https://source.unsplash.com/random')\n      }\n    })\n  })\n}\n\ngetLocation()\n  .then((data) => {\n    return Promise.all([getWeather(data[0], data[1]), getPlaceImage(data[0], data[1])])\n      .then((data) => {\n        console.log(data)\n        let conditions = data[0].weather[0].description\n        let image = data[1]\n        fetchJsonp('https://en.wikipedia.org/w/api.php?format=json&action=query&generator=search&gsrnamespace=0&gsrlimit=1&prop=extracts&exintro&explaintext&exsentences=5&exlimit=max&redirects=1&gsrsearch=' + data[0].name)\n          .then((locationInfo) => locationInfo.json())\n          .then((locationInfo) => {\n            console.log(locationInfo)\n            let resp = ''\n            for (let page in locationInfo.query.pages) {\n              resp = locationInfo.query.pages[page].extract\n            }\n            return resp\n          })\n          .then((locationInfo) => {\n            updateView(\n              conditions,\n              data[0].name,\n              data[0].sys.country,\n              (data[0].main.temp - 272.15).toPrecision(3),\n              locationInfo + '\\n\\nPowered by Weather Underground, Wikipedia, Google, and Tachyons. Loading cubes by Tobias Ahlin.',\n              image\n            )\n          })\n          .catch((err) => {\n            handleError(err)\n          })\n      })\n      .catch((err) => {\n        handleError(err)\n      })\n  })\n  .catch((err) => {\n    handleError(err)\n  })\n\nfunction updateView (weather, city, country, temperature, extract, image) {\n  document.getElementById('background').style.backgroundImage = 'url(\\'' + image + '\\')'\n  document.getElementById('city').innerText = weather + ' in ' + city + ' (' + temperature + 'Â°C)'\n  document.getElementById('country-or-state').innerText = country\n  document.getElementById('location-info').innerText = extract\n  document.getElementById('loading').style.display = 'none'\n  document.getElementById('article').style.display = 'block'\n}\n\nfunction handleError (err) {\n  document.getElementById('error-message').innerText = 'Technical details: ' + err\n  document.getElementById('loading').style.display = 'none'\n  document.getElementById('error').style.display = 'block'\n}\n"]}